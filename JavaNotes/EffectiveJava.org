* Consider static factory methods instead of constructors
** 优点
   1. unlike constructors, they have names.
   2. unlike constructors, they are not required to create a new object each time they’re invoked. 
   3. unlike constructors, they can return an object of any subtype of their return type.
   4. they reduce the verbosity of creating parameterized type instances. 
	  在java 7中，已经可以省略了
	  #+NAME: Example
	  #+BEGIN_SRC java
        // 构造函数需要重写一遍类型参数，在Java 7中已经不需要了
        Map<String, List<String>> = new HashMap<String, List<String>>();

        // 使用静态函数方法
        // 声明
        public static <K, V> HashMap<K, V> newInstance() {
            return new HashMap<K, V>();
        }
        // 调用
        Map<String, List<String>> m = HashMap.newInstance();
	  #+END_SRC
** 缺点
   1. providing only static factory methods, classes without public 
   or protected constructors cannot be subclassed
   2. they are not readily distinguishable from other static methods. 
	  无法和其他静态函数区分开来，可以通过注释解决
*** 
* Consider a builder when faced with many constructor parameters
#+NAME: Example
#+BEGIN_SRC java
  public class NutritionFacts {
      private final int servingSize; 
      private final int servings;
      private final int calories;
      private final int fat;
      private final int sodium;
      private final int carbohydrate;

      public static class Builder {
          // Required parameters
          private final int servingSize;
          private final int servings;
          // Optional parameters - initialized to default values
          private int calories      = 0;
          private int fat           = 0;
          private int carbohydrate  = 0;
          private int sodium        = 0;
          public Builder(int servingSize, int servings) {
              this.servingSize = servingSize;
              this.servings    = servings;
          }
          
          public Builder calories(int val)
              { calories = val;      return this; }
          public Builder fat(int val)
              { fat = val;           return this; }
          public Builder carbohydrate(int val)
              { carbohydrate = val;  return this; }
          public Builder sodium(int val)
              { sodium = val;        return this; }
          public NutritionFacts build() {
              return new NutritionFacts(this);
          } 
      }
      private NutritionFacts(Builder builder) {
          servingSize  = builder.servingSize;
          servings     = builder.servings;
          calories     = builder.calories;
      } 
  }
#+END_SRC
* Enforce the singleton property with a private constructor or an enum type
  1. 使用静态工场方法
	 如果单例类实现Serializable，必须保证反序列化后不会生成另一个新的实例
	 具体实现方法用到时，再找？？？
	 #+BEGIN_SRC java
       // Singleton with static factory
       public class Elvis {
           private static final Elvis INSTANCE = new Elvis(); private Elvis() { ... }
           public static Elvis getInstance() { return INSTANCE; }
           public void leaveTheBuilding() { ... }
       }
	 #+END_SRC
  2. 使用枚举类型
	 #+BEGIN_SRC java
       // Enum singleton - the preferred approach
       public enum Elvis {
           INSTANCE;
           public void leaveTheBuilding() { ... }
       }
	 #+END_SRC
* Enforce noninstantiability with a private constructor
* Avoid creating unnecessary objects
  如果创建的实例不会被修改，或者被修改后不影响程序，
  尽量不要创建新的实例，使用同一个实例就好
  1. String
	 #+BEGIN_SRC java
       // 不要使用这种方式
       String s = new String("stringette");

       // 使用如下方式
       String s = "stringette";
	 #+END_SRC
  2. 注意不必要的 autoboxing 
	 #+BEGIN_SRC java
       // Hideously slow program! Can you spot the object creation?
       public static void main(String[] args) {
           Long sum = 0L;
           for (long i = 0; i < Integer.MAX_VALUE; i++) {
               sum += i;
           }
           System.out.println(sum);
       }
	 #+END_SRC
* Eliminate obsolete object references
  1. whenever a class manages its own memory, the programmer should be alert for memory leaks.
  2. Another common source of memory leaks is caches.
  3. A third common source of memory leaks is listeners and other callbacks.
  #+BEGIN_SRC java
    // 以下程序会导致数组内对象无法被及时回收
    public class Stack {
        private Object[] elements;
        private int size = 0;
        private static final int DEFAULT_INITIAL_CAPACITY = 16;
        public Stack() {
            elements = new Object[DEFAULT_INITIAL_CAPACITY];
        }
        public void push(Object e) {
            ensureCapacity();
            elements[size++] = e;
        }

        // *** POP 后没有 置为Null ***
        public Object pop() {
            if (size == 0)
                throw new EmptyStackException();
            return elements[--size];
        }
        /**
         ,* Ensure space for at least one more element, roughly
         ,* doubling the capacity each time the array needs to grow.
         ,*/
        private void ensureCapacity() {
            if (elements.length == size)
                elements = Arrays.copyOf(elements, 2 * size + 1);
        }
    }

    // 更改
    public Object pop() {
        if (size == 0)
            throw new EmptyStackException();
        Object result = elements[--size];
        elements[size] = null; // *** Eliminate obsolete reference ***
        return result;
    }

  #+END_SRC
* Avoid finalizers
** 不适用finalize()，自定义一个终止方法，并在try-finally中调用
	 #+BEGIN_SRC java
       // try-finally block guarantees execution of termination method
       Foo foo = new Foo(...);
       try {
           // Do what must be done with foo
                  ...
       } finally {
           foo.terminate();  // Explicit termination method
       }
	 #+END_SRC
** finalizer的用处
   1. 检查用户是否有调用实例的终止方法，打印警告信息，便于调试
   2. 用于是否JNI底层不重要的资源，如果是重要的资源，就需要定义终止方法
** 子类重载finalize()方法
   子类需要显示调用super.finalize()，且需要放在最后执行
   最好放在try-finally中执行
   #+BEGIN_SRC java
     // Manual finalizer chaining
     @Override protected void finalize() throws Throwable {
         try {
             ... // Finalize subclass state
         } finally {
             super.finalize();
         }
     }
   #+END_SRC
** Finalizer Guardian idiom：避免子类忘记调用父类finalize()
   在父类中实现一个匿名内部类
   #+BEGIN_SRC java
     // Finalizer Guardian idiom
     public class Foo {
         // Sole purpose of this object is to finalize outer Foo object
         private final Object finalizerGuardian = new Object() {
                 @Override protected void finalize() throws Throwable {
                     ... // Finalize outer Foo object
                 }
             };
         ...  // Remainder omitted
     }
   #+END_SRC
* 实现 equals
** The equals method implements an equivalence relation.
   1. Reflexive: For any non-null reference value x, x.equals(x) must return true.
   2. Symmetric: For any non-null reference values x and y, x.equals(y)must return 
   true if and only if y.equals(x) returns true.
   3. Transitive: For any non-null reference values x, y, z, if x.equals(y) returns true 
   and y.equals(z) returns true, then x.equals(z) must return true.
   4. Consistent: For any non-null reference values x and y, multiple invocations of 
   x.equals(y) consistently return true or consistently return false, 
   pro- vided no information used in equals comparisons on the objects is modified.
   5. For any non-null reference value x, x.equals(null) must return false.
** There is no way to extend an instantiable class and add a value component while preserving the equals contract.
   1. 但是继承抽象类可以
   2. 可以通过组合而不是继承来实现equals
** do not write an equals method that depends on unreliable resources. 
** 实现equals的流程
   1. Use the == operator to check if the argument is a reference to this object.
   2. Use the instanceof operator to check if the argument has the correct type.
	  - 使用当前的类作为类型检查
	  - 极少数情况下，使用该类实现的接口Interface作为类型检查（如Set,List,Map）
   3. Cast the argument to the correct type. 
   4. For each “significant” field in the class, check if that field of the argument 
   matches the corresponding field of this object.
      - For best performance, you should first compare fields that are more likely 
	  to differ, less expensive to compare, or, ideally, both. 
   #+BEGIN_SRC java
     public class MyClass {
         // ...

         @Override public boolean equals(Object o) {
             if (this == o) {
                 return true;
             }

             if (!(o instanceof MyClass)) {
                 return false
             }

             MyClass myObject = (MyClass) o;

             // 比较各个filed，顺序如下
             // 很可能不同的，不会花费太多时间和资源进行比较的变量
             // 其他变量
         }
     }
   #+END_SRC
* 实现equals也必须实现 hashCode
** Here is the contract, copied from the Object specification [JavaSE6]:
   1. Whenever it is invoked on the same object more than once during an execu- tion of an application, 
   the hashCode method must consistently return the same integer, provided no information used in equals
   comparisons on the object is modified. This integer need not remain consistent from one execu- tion of 
   an application to another execution of the same application.
   2. If two objects are equal according to the equals(Object) method,then calling the hashCode method on each of
   the two objects must produce the same integer result.
   3. It is not required that if two objects are unequal according to the equals(Object) method, then calling 
   the hashCode method on each of the two objects must produce distinct integer results. However, the programmer
   should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.
* Always override toString
* Override clone judiciously
  由于缺点太多，一般不需要实现，
  如果需要实现，可以用构造函数或者工厂方法实现
  #+BEGIN_SRC java
    public class Yum {
        // ...
        public Yum(Yum yum) {
            // ...
        }

        public static Yum newInstances(Yum yum) {
            // ...
        }
    }
  #+END_SRC
* Consider implementing Comparable
* Minimize the accessibility of classes and members
* In public classes, use accessor methods, not public fields
* Minimize mutability
** To make a class immutable, follow these five rules
   1. Don’t provide any methods that modify the object’s state
   2. Ensure that the class can’t be extended
   3. Make all fields final
   4. Make all fields private
   5. Ensure exclusive access to any mutable components.
* Favor composition over inheritance
  #+BEGIN_SRC java
    // Reusable forwarding class
    public class ForwardingSet<E> implements Set<E> {
        private final Set<E> s;
        public ForwardingSet(Set<E> s) { this.s = s; }

        private final Set<E> s;
        public ForwardingSet(Set<E> s) { this.s = s; }
        
        public void clear()               { s.clear();            }
        public boolean contains(Object o) { return s.contains(o); }
        public boolean isEmpty() { return s.isEmpty(); }
        public int size() { return s.size(); }
        public Iterator<E> iterator() { return s.iterator(); }
        public boolean add(E e) { return s.add(e); }
        public boolean remove(Object o) { return s.remove(); }
        public boolean containsAll(Collection<?> c) { return s.containsAll(c); }
        public boolean addAll(Collection<? extends E> c) { return s.addAll(c); }
        public boolean removeAll(Collection<?> c) { return s.removeAll(c); }
        public boolean retainAll(Collection<?> c) { return s.retainAll(c); }
        public Object[] toArray()          { return s.toArray();  }
        public <T> T[] toArray(T[] a)      { return s.toArray(a); }
        @Override public boolean equals(Object o) { return s.equals(o);  }
        @Override public int hashCode()    { return s.hashCode(); }
        @Override public String toString() { return s.toString(); }
    }

    // Wrapper class - uses composition in place of inheritance
    public class InstrumentedSet<E> extends ForwardingSet<E> {
        private int addCount = 0;

        public InstrumentedSet(Set<E> s) {
            super(s);
        }

        @Override public boolean add(E e) {
            addCount++;
            return super.add(e);
        }

        @Override public boolean addAll(Collection<? extends E> c) {
            addCount += c.size();
            return super.addAll(c);
        }

        public int getAddCount() {
            return addCount;
        }
    }
  #+END_SRC
* Design and document for inheritance or else prohibit it
  如果一个类可以被继承，那么在这个类中，不能调用那些可以被重载的方法，避免子类发生奇怪的行为，
  可以定义一个private帮助方法
** Constructors must not invoke overridable methods
** neither clone nor readObject may invoke an overridable method, directly or indirectly
* Prefer interfaces to abstract classes
  1. You can combine the virtues of interfaces and abstract classes by providing an abstract skeletal 
  implementation class to go with each nontrivial interface that you export.
* Use interfaces only to define types
* Prefer class hierarchies to tagged classes
* Use function objects to represent strategies
* Don’t use raw types in new code
* Eliminate unchecked warnings
* Prefer lists to arrays (TODO: 内容需要进一步理解)
* Favor generic types
* Favor generic methods
* Use bounded wildcards to increase API flexibility
* Consider type safe heterogeneous containers
